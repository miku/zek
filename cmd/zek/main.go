package main

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"flag"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"strings"

	"github.com/miku/zek"
	"github.com/sethgrid/pester"
)

var (
	withComments         = flag.Bool("e", false, "add comments with example")
	withJSONTags         = flag.Bool("j", false, "add JSON tags")
	maxExamples          = flag.Int("max-examples", 10, "limit number of examples")
	debug                = flag.Bool("d", false, "debug output")
	createExampleProgram = flag.Bool("p", false, "write out an example program")
	tagName              = flag.String("t", "", "emit struct for tag matching this name")
	skipFormatting       = flag.Bool("F", false, "skip formatting")
	strict               = flag.Bool("s", false, "strict parsing and writing")
	exampleMaxChars      = flag.Int("x", 25, "max chars for example")
	showVersion          = flag.Bool("version", false, "show version")
	structName           = flag.String("n", "", "use a different name for the top-level struct")
	compact              = flag.Bool("c", false, "emit more compact struct (noop, as this is the default since 0.1.7)")
	nonCompact           = flag.Bool("C", false, "emit less compact struct")
	uniqueExamples       = flag.Bool("u", false, "filter out duplicated examples")
	omitEmptyText        = flag.Bool("m", false, "omit empty Text fields")
	outputFile           = flag.String("o", "", "if set, write to output file, not stdout")
	packageName          = flag.String("P", "", "if set, write out struct within a package with the given name")
	fixedBanner          = flag.Bool("B", false, "use a fixed banner string (e.g. for CI)")
	readAtMost           = flag.Int64("S", 0, "read at most this many tags, approximately (0=unlimited)")
	useInnerXML          = flag.Bool("I", false, "use verbatim innerxml instead of chardata")
)

func main() {
	flag.Parse()
	if *showVersion {
		fmt.Println(zek.Version)
		os.Exit(0)
	}
	var (
		reader io.Reader = os.Stdin
		writer io.Writer = os.Stdout
		root             = new(zek.Node)
		buf    bytes.Buffer
	)
	root.MaxExamples = *maxExamples
	// Read one or more XML files or URLs given as arguments.
	if flag.NArg() > 0 {
		var rs []io.Reader
		for _, v := range flag.Args() {
			switch {
			case strings.HasPrefix(v, "http"):
				resp, err := pester.Get(v)
				if err != nil {
					log.Fatal(err)
				}
				defer resp.Body.Close()
				rs = append(rs, resp.Body)
			default:
				f, err := os.Open(v)
				if err != nil {
					log.Fatal(err)
				}
				defer f.Close()
				rs = append(rs, f)
			}
		}
		reader = io.MultiReader(rs...)
	}
	opts := zek.ReadOpts{
		MaxExamples: *maxExamples,
		MaxTokens:   *readAtMost,
	}
	if _, err := root.ReadFrom(reader, &opts); err != nil {
		log.Fatal(err)
	}
	// Move root, if we have a tagName. Ignore unknown names.
	if *tagName != "" {
		if n := root.ByName(*tagName); n != nil {
			root = n
		}
	}
	if *structName != "" {
		root.Name = xml.Name{Space: "", Local: *structName}
	}
	if *outputFile != "" {
		f, err := os.Create(*outputFile)
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()
		writer = f
	}
	sw := zek.NewStructWriter(&buf)
	sw.WithComments = *withComments
	sw.WithJSONTags = *withJSONTags
	sw.Strict = *strict
	sw.ExampleMaxChars = *exampleMaxChars
	sw.Compact = !*nonCompact
	sw.UniqueExamples = *uniqueExamples
	sw.OmitEmptyText = *omitEmptyText
	sw.UseInnerXML = *useInnerXML
	if *fixedBanner {
		sw.Banner = fmt.Sprintf(`generated automatically by zek %s. DO NOT EDIT.`, zek.Version)
	}
	switch {
	default:
		if err := sw.WriteNode(root); err != nil {
			log.Fatal(err)
		}
	case *debug:
		b, err := json.Marshal(root)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(string(b))
	case *packageName != "":
		fmt.Fprintf(&buf, `
			// Code generated by zek %s; DO NOT EDIT.
			package %s

			import "encoding/xml"
		`, zek.Version, *packageName)
		if err := sw.WriteNode(root); err != nil {
			log.Fatal(err)
		}
	case *createExampleProgram:
		io.WriteString(&buf, `
			package main

			import (
				"encoding/json"
				"encoding/xml"
				"fmt"
				"log"
				"os"

				"golang.org/x/net/html/charset"
			)
		`)
		if err := sw.WriteNode(root); err != nil {
			log.Fatal(err)
		}
		io.WriteString(&buf, fmt.Sprintf(`
			func main() {
				dec := xml.NewDecoder(os.Stdin)
				dec.CharsetReader = charset.NewReaderLabel
				dec.Strict = false

				var doc %s
				if err := dec.Decode(&doc); err != nil {
					log.Fatal(err)
				}
				b, err := json.Marshal(doc)
				if err != nil {
					log.Fatal(err)
				}
				fmt.Println(string(b))
			}
		`, sw.NameFunc(root.Name.Local)))
	}
	if !*skipFormatting {
		b, err := format.Source(buf.Bytes())
		if err != nil {
			log.Fatal(err)
		}
		fmt.Fprintf(writer, string(b))
	} else {
		fmt.Fprintf(writer, buf.String())
	}
}
